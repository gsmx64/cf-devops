---
# tasks file for k8sworkers
- name: Update all installed packages using YUM module
  yum:
    name: '*'
    state: latest
    update_cache: yes
    update_only: yes
  register: yum_update_status

- name: Add docker repository
  shell:
    cmd: |
      dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

- name: Add k8s repository
  shell:
    cmd: |
      cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
      enabled=1
      gpgcheck=1
      repo_gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
      exclude=kubelet kubeadm kubectl
      EOF

- name: Disable swap
  shell:
    cmd: |
      swapoff -a
      sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      setenforce 0
      sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

- name: install docker packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{  docker_packages }}"


- name: Install k8s packages - kubelet kubeadm kubectl
  shell: dnf install -y {kubelet,kubeadm,kubectl} --disableexcludes=kubernetes

- name: Setup containerd
  shell:
    cmd: |
      containerd config default > /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

- name: start containderd service
  service:
    name: containerd
    state: started
    enabled: yes

- name: Add netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Creating a file with content
  copy:
    dest: "/etc/modprobe.d/br_netfilter.conf"
    content: |
      br_netfilter

- name: Enable IP Forward
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: yes
    state: present
    reload: yes

- name: Generate Token for workers
  shell: kubeadm token create --print-join-command
  register: join_command_raw
  delegate_to: "{{ groups['master'][0] }}"

- name: Set cluster
  set_fact: 
    join_command: "{{ join_command_raw.stdout_lines[0] }}"
  ignore_errors: True

- name: Join cluster
  shell: "{{ hostvars['master'].join_command }} >> node_joined.txt"
    args:
      chdir: $HOME
      creates: node_joined.txt

- name: start kubelet service
  service:
    name: kubelet
    state: started
    enabled: yes

- name: FirewallD rules
  firewalld:
    permanent: yes
    immediate: yes
    port: "{{item.port}}/{{item.proto}}"
    state: "{{item.state}}"
    zone: "{{item.zone}}"
  with_items:
   - {port: "80", proto: "tcp", state: "enabled", zone: "public" }
   - {port: "443", proto: "tcp", state: "enabled", zone: "public" }
   - {port: "8443", proto: "tcp", state: "enabled", zone: "public" }
   - {port: "10250", proto: "tcp", state: "enabled", zone: "public" }
   - {port: "30000-32767", proto: "tcp", state: "enabled", zone: "public" }
